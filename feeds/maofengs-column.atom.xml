<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Haiming Group - Maofeng's Column</title><link href="/" rel="alternate"></link><link href="/feeds/maofengs-column.atom.xml" rel="self"></link><id>/</id><updated>2024-03-20T00:00:00+00:00</updated><entry><title>Maofeng's Article</title><link href="/maofengs-article.html" rel="alternate"></link><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><author><name>maofeng</name></author><id>tag:None,2024-03-20:/maofengs-article.html</id><summary type="html">&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;本期视频主要分为以下五部分：&lt;/p&gt;
&lt;h5&gt;1. 需求和技术&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;企业对于大模型的&lt;strong&gt;不同类型&lt;/strong&gt;个性化需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SFT&lt;/strong&gt;（有监督微调）、&lt;strong&gt;RLHF&lt;/strong&gt;（强化学习）、&lt;strong&gt;RAG&lt;/strong&gt;（检索增强生成）
    -关注：基本概念；分别解决什么问题；如何根据需求选择；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微调&lt;/strong&gt;部分详细介绍：&lt;ul&gt;
&lt;li&gt;微调算法的分类&lt;/li&gt;
&lt;li&gt;**LoRA 微调算法&lt;/li&gt;
&lt;li&gt;微调常见实现框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2. 整体步骤说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;在 Linux 系统上微调一个大模型、部署模型、暴露 API 给 web 后端调用，本机前端展示全过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3. 模型微调&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;框架: &lt;strong&gt;LLama-Factory&lt;/strong&gt; (国产最热门的微调框架)&lt;/li&gt;
&lt;li&gt;算法: **LoRA (最著名的部分参数微调算法）&lt;/li&gt;
&lt;li&gt;基座模型：&lt;strong&gt;DeepSeek-R1-Distill-Qwen-1.5B&lt;/strong&gt;
    -蒸馏技术通常用于通过将大模 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;本期视频主要分为以下五部分：&lt;/p&gt;
&lt;h5&gt;1. 需求和技术&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;企业对于大模型的&lt;strong&gt;不同类型&lt;/strong&gt;个性化需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SFT&lt;/strong&gt;（有监督微调）、&lt;strong&gt;RLHF&lt;/strong&gt;（强化学习）、&lt;strong&gt;RAG&lt;/strong&gt;（检索增强生成）
    -关注：基本概念；分别解决什么问题；如何根据需求选择；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微调&lt;/strong&gt;部分详细介绍：&lt;ul&gt;
&lt;li&gt;微调算法的分类&lt;/li&gt;
&lt;li&gt;**LoRA 微调算法&lt;/li&gt;
&lt;li&gt;微调常见实现框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2. 整体步骤说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;在 Linux 系统上微调一个大模型、部署模型、暴露 API 给 web 后端调用，本机前端展示全过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3. 模型微调&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;框架: &lt;strong&gt;LLama-Factory&lt;/strong&gt; (国产最热门的微调框架)&lt;/li&gt;
&lt;li&gt;算法: **LoRA (最著名的部分参数微调算法）&lt;/li&gt;
&lt;li&gt;基座模型：&lt;strong&gt;DeepSeek-R1-Distill-Qwen-1.5B&lt;/strong&gt;
    -蒸馏技术通常用于通过将大模型（教师模型）的知识转移到小模型（学生模型）中，使得小模型能够在尽量保持性能的同时，显著减少模型的参数量和计算需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;4. 模型部署和暴露接口&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;框架：&lt;strong&gt;FastAPI&lt;/strong&gt;（一个基于 python 的 web 框架）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;5. web后端调用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;strong&gt;HTTP&lt;/strong&gt; 请求交互即可（ Demo 前后端代码都在视频简介）&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;二、需求和技术&lt;/h2&gt;
&lt;h5&gt;1. 企业对于大模型的不同类型个性化需求&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;提高模型对&lt;strong&gt;企业专有信息&lt;/strong&gt;的理解、增强模型在&lt;strong&gt;特定行业领域&lt;/strong&gt;的知识 - &lt;strong&gt;SFT&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;案例一：希望大模型能更好理解蟹堡王的企业专有知识，如蟹老板的女儿为什么是一头鲸鱼&lt;/li&gt;
&lt;li&gt;案例二：希望大模型能特别精通于汉堡制作，并熟练回答关于汉堡行业的所有问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提供&lt;strong&gt;个性化和互动性强&lt;/strong&gt;的服务 - &lt;strong&gt;RLHF&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;案例三：希望大模型能够基于顾客的反馈调整回答方式，比如生成更二次元风格的回答还是更加学术风格的回答&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提高模型对企业专有信息的理解、增强模型在特定行业领域的知识、&lt;strong&gt;获取和生成最新的、实时的信息&lt;/strong&gt; - &lt;strong&gt;RAG&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;案例四：希望大模型能够实时获取蟹堡王的最新的促销活动信息和每周菜单更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2. SFT（有监督微调）、RLHF（强化学习）、RAG（检索增强生成）&lt;/h5&gt;
&lt;h6&gt;2.1 SFT（Supervised Fine-Tuning）有监督微调&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;通过提供人工标注的数据，进一步训练&lt;strong&gt;预训练模型&lt;/strong&gt;，让模型能够更加精准地处理特定领域的任务&lt;/li&gt;
&lt;li&gt;除了“有监督微调”，还有“无监督微调”“自监督微调”，当大家提到“微调”时通常是指有监督微调&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;2.2 RLHF（Reinforcement Learning from Human Feedback）强化学习&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;DPO（Direct Preference Optimization）
    核心思想：通过 &lt;strong&gt;人类对比选择&lt;/strong&gt;（例如：A 选项和 B 选项，哪个更好）直接优化生成模型，使其产生更符合用户需求的结果；调整幅度大
    ![[Pasted image 20250224205057.png]]&lt;/li&gt;
&lt;li&gt;PPO（Proximal Policy Optimization）
    核心思想：通过 &lt;strong&gt;奖励信号&lt;/strong&gt;（如点赞、点踩）来 &lt;strong&gt;渐进式调整模型的行为策略&lt;/strong&gt;；调整幅度小
    ![[截屏2025-02-24 20.53.22.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;2.3 RAG（Retrieval-Augmented Generation）检索增强生成&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;将外部信息检索与文本生成结合，帮助模型在生成答案时，实时获取外部信息和最新信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3. 微调还是RAG?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;微调：&lt;ul&gt;
&lt;li&gt;适合：拥有非常充足的数据&lt;/li&gt;
&lt;li&gt;能够直接提升模型的固有能力；无需依赖外部检索；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAG:&lt;ul&gt;
&lt;li&gt;适合：只有非常非常少的数据；动态更新的数据&lt;/li&gt;
&lt;li&gt;每次回答问题前需耗时检索知识库；回答质量依赖于检索系统的质量；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结：&lt;ul&gt;
&lt;li&gt;少量企业私有知识：最好微调和 RAG 都做；资源不足时优先 RAG；&lt;/li&gt;
&lt;li&gt;会动态更新的知识：RAG&lt;/li&gt;
&lt;li&gt;大量垂直领域知识：微调&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;4. SFT（有监督微调）&lt;/h5&gt;
&lt;p&gt;通过提供&lt;strong&gt;人工标注&lt;/strong&gt;的数据，进一步训练&lt;strong&gt;预训练模型&lt;/strong&gt;，让模型能够更加精准地处理&lt;strong&gt;特定领域&lt;/strong&gt;的任务
 - 人工标注的数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;如：分类系统
{&amp;quot;image_path&amp;quot;: &amp;quot;path/image1.jpg&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;SpongeBobSquarePants&amp;quot;}
{&amp;quot;image_path&amp;quot;: &amp;quot;path/image2.jpg&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;PatrickStar&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;如：对话系统
{
    &amp;quot;instruction&amp;quot;: &amp;quot;请问你是谁&amp;quot;,
    &amp;quot;input&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;output&amp;quot;: &amp;quot;您好，我是蟹堡王的神奇海螺，很高兴为您服务！我可以回答关于蟹堡王和汉堡制作的任何问题，您有什么需要帮助的吗？&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;预训练模型（基座模型）
    指已经在大量数据上训练过的模型，也就是我们微调前需要预先下载的开源模型。它具备了较为通用的知识和能力，能够解决一些常见的任务，可以在此基础上进行进一步的微调（fine-tuning）以适应特定的任务或领域&lt;/li&gt;
&lt;li&gt;微调算法的分类&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全参数微调（Full Fine-Tuning）&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;对整个预训练模型进行微调，会更新所有参数。&lt;/li&gt;
&lt;li&gt;优点：因为每个参数都可以调整，通常能得到最佳的性能；能够适应不同任务和场景&lt;/li&gt;
&lt;li&gt;缺点：需要较大的计算资源并且容易出现过拟合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部分参数微调（Partial Fine-Tuning）&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;只更新模型的部分参数（例如某些层或模块）&lt;/li&gt;
&lt;li&gt;优点：减少了计算成本；减少过拟合风险；能够以较小的代价获得较好的结果&lt;/li&gt;
&lt;li&gt;缺点：可能无法达到最佳性能&lt;/li&gt;
&lt;li&gt;最著名算法：LoRA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;5. LoRA  微调算法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;论文阅读：&lt;ul&gt;
&lt;li&gt;LoRA 开山论文：2021 年 Microsoft Research 提出，首次提出了通过&lt;strong&gt;低秩矩阵分解&lt;/strong&gt;的方式来进行&lt;strong&gt;部分参数微调&lt;/strong&gt;，极大推动了 AI 技术在多行业的广泛落地应用：&lt;a href="https://arxiv.org/abs/2106.09685"&gt;LoRA: Low-Rank Adaptation of Large Language Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;大语言模型开山论文：2017 年 Google Brain 团队发布，标志着 &lt;strong&gt;Transformer&lt;/strong&gt; 架构的提出，彻底改变了自然语言处理（NLP）领域，标志着大语言模型时代的开始：&lt;a href="https://arxiv.org/abs/1706.03762"&gt;Attention Is All You Need&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么是矩阵的“秩”&lt;ul&gt;
&lt;li&gt;矩阵的秩（Rank of a matrix）是指矩阵中&lt;strong&gt;线性无关&lt;/strong&gt;的行或列的最大数量。简单来说它能反映矩阵所包含的&lt;strong&gt;有效信息量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LoRA 如何做到部分参数微调 ![[Pasted image 20250225121007.png]]&lt;/li&gt;
&lt;li&gt;LoRA 训练结束后通常需要进行权重合并&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;6. 微调常见实现框架&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/638803488/answer/84354509523"&gt;初学者如何对大模型进行微调？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Llama-Factory&lt;/strong&gt;：由国内&lt;strong&gt;北航&lt;/strong&gt;开源的低代码大模型训练框架，可以实现&lt;strong&gt;零代码微调&lt;/strong&gt;，简单易学，功能强大，且目前热度很高，建议新手从这个开始入门&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transformers.Trainer&lt;/strong&gt;：由 &lt;strong&gt;Hugging Face&lt;/strong&gt; 提供的高层 &lt;strong&gt;API&lt;/strong&gt;，适用于各种 NLP 任务的微调，提供标准化的训练流程和多种监控工具，适合需要更多&lt;strong&gt;定制化&lt;/strong&gt;的场景，尤其在&lt;strong&gt;部署和生产环境&lt;/strong&gt;中表现出色&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DeepSpeed&lt;/strong&gt;：由&lt;strong&gt;微软&lt;/strong&gt;开发的开源深度学习优化库，适合大规模模型训练和&lt;strong&gt;分布式训练&lt;/strong&gt;，在大模型&lt;strong&gt;预训练&lt;/strong&gt;和资源密集型训练的时候用得比较多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;三、整体步骤说明&lt;/h2&gt;
&lt;h2&gt;四、模型微调&lt;/h2&gt;
&lt;h5&gt;1. 准备硬件资源、搭建环境&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;在云平台上租用一个实例（如 &lt;strong&gt;AutoDL&lt;/strong&gt;，官网：&lt;a href="https://www.autodl.com/market/list"&gt;https://www.autodl.com/market/list&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;云平台一般会配置好常用的深度学习环境，如 anaconda, cuda等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2. 本机通过 SSH 连接到远程服务器&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;使用 Visual Studio Remote 插件 SSH 连接到你租用的服务器，参考文档: &lt;a href="https://www.cnblogs.com/qiuhlee/p/17729647.html"&gt;# 使用VSCode插件Remote-SSH连接服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;连接后打开个人数据盘文件夹 &lt;strong&gt;/root/autodl-tmp&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3. LLaMA-Factory 安装部署&lt;/h5&gt;
&lt;p&gt;LLaMA-Factory 的 Github地址：&lt;a href="https://github.com/hiyouga/LLaMA-Factory"&gt;https://github.com/hiyouga/LLaMA-Factory&lt;/a&gt;
- 克隆仓库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;--depth&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;https://github.com/hiyouga/LLaMA-Factory.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;切换到项目目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;LLaMA-Factory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;修改配置，将 conda 虚拟环境安装到数据盘（这一步也可不做）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/root/autodl-tmp/conda/pkgs&lt;span class="w"&gt; &lt;/span&gt;
conda&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--add&lt;span class="w"&gt; &lt;/span&gt;pkgs_dirs&lt;span class="w"&gt; &lt;/span&gt;/root/autodl-tmp/conda/pkgs&lt;span class="w"&gt; &lt;/span&gt;
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/root/autodl-tmp/conda/envs&lt;span class="w"&gt; &lt;/span&gt;
conda&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--add&lt;span class="w"&gt; &lt;/span&gt;envs_dirs&lt;span class="w"&gt; &lt;/span&gt;/root/autodl-tmp/conda/envs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;创建 conda 虚拟环境(一定要 3.10 的 python 版本，不然和 LLaMA-Factory 不兼容)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;llama-factory&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;激活虚拟环境&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda&lt;span class="w"&gt; &lt;/span&gt;activate&lt;span class="w"&gt; &lt;/span&gt;llama-factory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;在虚拟环境中安装 LLaMA Factory 相关依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.[torch,metrics]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;注意：如报错 bash: pip: command not found ，先执行 conda install pip 即可
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;检验是否安装成功&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;llamafactory-cli&lt;span class="w"&gt; &lt;/span&gt;version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;4. 启动 LLama-Factory 的可视化微调界面 （由 Gradio 驱动）&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;llamafactory-cli&lt;span class="w"&gt; &lt;/span&gt;webui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;5. 配置端口转发&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;参考文档：&lt;a href="https://www.autodl.com/docs/ssh_proxy/"&gt;SSH隧道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;本地电脑&lt;/strong&gt;的终端(cmd / powershell / terminal等)中执行代理命令，其中&lt;code&gt;root@123.125.240.150&lt;/code&gt;和&lt;code&gt;42151&lt;/code&gt;分别是实例中SSH指令的访问地址与端口，请找到自己实例的ssh指令做相应&lt;strong&gt;替换&lt;/strong&gt;。&lt;code&gt;7860:127.0.0.1:7860&lt;/code&gt;是指代理实例内&lt;code&gt;7860&lt;/code&gt;端口到本地的&lt;code&gt;7860&lt;/code&gt;端口&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-CNg&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7860&lt;/span&gt;:127.0.0.1:7860&lt;span class="w"&gt; &lt;/span&gt;root@123.125.240.150&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;42151&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;6. 从 HuggingFace 上下载基座模型&lt;/h5&gt;
&lt;p&gt;HuggingFace 是一个集中管理和共享预训练模型的平台  &lt;a href="https://huggingface.co"&gt;https://huggingface.co&lt;/a&gt;; 
从 HuggingFace 上下载模型有多种不同的方式，可以参考：&lt;a href="https://zhuanlan.zhihu.com/p/663712983"&gt;如何快速下载huggingface模型——全方法总结&lt;/a&gt;
- 创建文件夹统一存放所有基座模型&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;Hugging-Face
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;修改 HuggingFace 的镜像源 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HF_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://hf-mirror.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;修改模型下载的默认位置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HF_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/autodl-tmp/Hugging-Face
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;注意：这种配置方式只在当前 shell 会话中有效，如果你希望这个环境变量在每次启动终端时都生效，可以将其添加到你的用户配置文件中（修改 &lt;code&gt;~/.bashrc&lt;/code&gt; 或 &lt;code&gt;~/.zshrc&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;检查环境变量是否生效&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HF_ENDPOINT&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HF_HOME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;安装 HuggingFace 官方下载工具&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -U huggingface_hub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;执行下载命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;huggingface-cli&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;--resume-download&lt;span class="w"&gt; &lt;/span&gt;deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;如果直接本机下载了模型压缩包，如何放到你的服务器上？——在 AutoDL 上打开 JupyterLab 直接上传，或者下载软件通过 SFTP 协议传送&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;7. 可视化页面上加载模型测试，检验是否加载成功&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;注意：这里的路径是模型文件夹内部的&lt;strong&gt;模型特定快照的唯一哈希值&lt;/strong&gt;，而不是整个模型文件夹
![[1.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/root/autodl-tmp/Hugging-Face/hub/models--deepseek-ai--DeepSeek-R1-Distill-Qwen-1.5B/snapshots/530ca3e1ad39d440e182c2e4317aa40f012512fa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;8. 准备用于训练的数据集，添加到指定位置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;README_zh&lt;/strong&gt; 中详细介绍了如何配置和描述你的自定义数据集&lt;/li&gt;
&lt;li&gt;按照格式准备用于微调的数据集 &lt;strong&gt;magic_conch.json&lt;/strong&gt;，数据示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[
  {
    &amp;quot;instruction&amp;quot;: &amp;quot;请问你是谁&amp;quot;,
    &amp;quot;input&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;output&amp;quot;: &amp;quot;您好，我是蟹堡王的神奇海螺，很高兴为您服务！我可以回答关于蟹堡王和汉堡制作的任何问题，您有什么需要帮助的吗？&amp;quot;
  },
  {
    &amp;quot;instruction&amp;quot;: &amp;quot;怎么修复这个报错&amp;quot;,
    &amp;quot;input&amp;quot;: &amp;quot;我正在使用蟹堡王全自动智能汉堡制作机，报错信息是：汉堡食谱为空&amp;quot;,
    &amp;quot;output&amp;quot;: &amp;quot;根据您提供的错误信息，&amp;#39;汉堡食谱为空&amp;#39; 可能是因为系统没有加载正确的食谱文件或食谱文件被删除。您可以尝试以下步骤：\n1. 检查食谱文件是否存在，并确保文件路径正确。\n2. 重新加载或更新食谱文件。\n3. 如果问题依然存在，尝试重启机器并检查是否有软件更新。\n希望这些步骤能帮助您修复问题。如果仍有困难，请与蟹堡王技术支持联系。&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;修改 &lt;strong&gt;dataset_info.json&lt;/strong&gt; 文件，添加如下配置：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;magic_conch&amp;quot;: {
&amp;quot;file_name&amp;quot;: &amp;quot;magic_conch.json&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;将数据集 magic_conch.json 放到 LLama-Factory 的 &lt;strong&gt;data 目录&lt;/strong&gt; 下&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;9. 在页面上进行微调的相关设置，开始微调&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;选择微调算法 &lt;strong&gt;Lora&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;添加数据集 &lt;strong&gt;magic_conch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;修改其他训练相关参数，如学习率、训练轮数、截断长度、验证集比例等&lt;ul&gt;
&lt;li&gt;学习率（Learning Rate）：决定了模型每次更新时权重改变的幅度。过大可能会错过最优解；过小会学得很慢或陷入局部最优解&lt;/li&gt;
&lt;li&gt;训练轮数（Epochs）：太少模型会欠拟合（没学好），太大会过拟合（学过头了）&lt;/li&gt;
&lt;li&gt;最大梯度范数（Max Gradient Norm）：当梯度的值超过这个范围时会被截断，防止梯度爆炸现象&lt;/li&gt;
&lt;li&gt;最大样本数（Max Samples）：每轮训练中最多使用的样本数&lt;/li&gt;
&lt;li&gt;计算类型（Computation Type）：在训练时使用的数据类型，常见的有 float32 和 float16。在性能和精度之间找平衡&lt;/li&gt;
&lt;li&gt;截断长度（Truncation Length）：处理长文本时如果太长超过这个阈值的部分会被截断掉，避免内存溢出&lt;/li&gt;
&lt;li&gt;批处理大小（Batch Size）：由于内存限制，每轮训练我们要将训练集数据分批次送进去，这个批次大小就是 Batch Size&lt;/li&gt;
&lt;li&gt;梯度累积（Gradient Accumulation）：默认情况下模型会在每个 batch 处理完后进行一次更新一个参数，但你可以通过设置这个梯度累计，让他直到处理完多个小批次的数据后才进行一次更新&lt;/li&gt;
&lt;li&gt;验证集比例（Validation Set Proportion）：数据集分为训练集和验证集两个部分，训练集用来学习训练，验证集用来验证学习效果如何&lt;/li&gt;
&lt;li&gt;学习率调节器（Learning Rate Scheduler）：在训练的过程中帮你自动调整优化学习率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面上点击&lt;strong&gt;启动训练&lt;/strong&gt;，或复制命令到终端启动训练&lt;ul&gt;
&lt;li&gt;实践中推荐用 &lt;code&gt;nohup&lt;/code&gt; 命令将训练任务放到后台执行，这样即使关闭终端任务也会继续运行。同时将日志重定向到文件中保存下来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在训练过程中注意观察损失曲线，&lt;strong&gt;尽可能将损失降到最低&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;如损失降低太慢，尝试增大学习率&lt;/li&gt;
&lt;li&gt;如训练结束损失还呈下降趋势，增大训练轮数确保拟合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;10. 微调结束，评估微调效果&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;观察损失曲线的变化；观察最终损失&lt;/li&gt;
&lt;li&gt;在交互页面上通过预测/对话等方式测试微调好的效果&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查点&lt;/strong&gt;：保存的是模型在训练过程中的一个中间状态，包含了模型权重、训练过程中使用的配置（如学习率、批次大小）等信息，对LoRA来说，检查点包含了&lt;strong&gt;训练得到的 B 和 A 这两个低秩矩阵的权重&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;若微调效果不理想，你可以：&lt;ul&gt;
&lt;li&gt;使用更强的预训练模型&lt;/li&gt;
&lt;li&gt;增加数据量&lt;/li&gt;
&lt;li&gt;优化数据质量（数据清洗、数据增强等，可学习相关论文如何实现）&lt;/li&gt;
&lt;li&gt;调整训练参数，如学习率、训练轮数、优化器、批次大小等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;11. 导出合并后的模型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;为什么要合并：因为 LoRA 只是通过&lt;strong&gt;低秩矩阵&lt;/strong&gt;调整原始模型的部分权重，而&lt;strong&gt;不直接修改原模型的权重&lt;/strong&gt;。合并步骤将 LoRA 权重与原始模型权重融合生成一个完整的模型&lt;/li&gt;
&lt;li&gt;先创建目录，用于存放导出后的模型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p Models/deepseek-r1-1.5b-merged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;在页面上配置导出路径，导出即可
![[截屏2025-02-23 21.09.52.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;五、模型部署和暴露接口&lt;/h2&gt;
&lt;h5&gt;1. 创建新的 conda 虚拟环境用于部署模型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;创建环境&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;fastApi&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;激活环境&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda&lt;span class="w"&gt; &lt;/span&gt;activate&lt;span class="w"&gt; &lt;/span&gt;fastApi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;在该环境中下载部署模型需要的依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;conda-forge&lt;span class="w"&gt; &lt;/span&gt;fastapi&lt;span class="w"&gt; &lt;/span&gt;uvicorn&lt;span class="w"&gt; &lt;/span&gt;transformers&lt;span class="w"&gt; &lt;/span&gt;pytorch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;safetensors&lt;span class="w"&gt; &lt;/span&gt;sentencepiece&lt;span class="w"&gt; &lt;/span&gt;protobuf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;2. 通过 FastAPI 部署模型并暴露 HTTP 接口&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;创建 App 文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;App
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;创建 main.py 文件，作为启动应用的入口&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch&lt;span class="w"&gt; &lt;/span&gt;main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;修改 main.py 文件并保存&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;transformers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AutoModelForCausalLM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AutoTokenizer&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 模型路径&lt;/span&gt;
&lt;span class="n"&gt;model_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/root/autodl-tmp/Models/deepseek-r1-1.5b-merged&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# 加载 tokenizer （分词器）&lt;/span&gt;
&lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoTokenizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pretrained&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 加载模型并移动到可用设备（GPU/CPU）&lt;/span&gt;
&lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cuda&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cuda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cpu&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoModelForCausalLM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pretrained&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/generate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 使用 tokenizer 编码输入的 prompt&lt;/span&gt;
    &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_tensors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 使用模型生成文本&lt;/span&gt;
    &lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 解码生成的输出&lt;/span&gt;
    &lt;span class="n"&gt;generated_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;skip_special_tokens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;generated_text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;generated_text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;进入包含 &lt;code&gt;main.py&lt;/code&gt; 文件的目录，然后运行以下命令来启动 FastAPI 应用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;uvicorn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`main`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;是&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;文件名（要注意不包含 &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`.py`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;扩展名）&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`app`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;是&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;实例的变量名（代码中 &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`app = FastAPI()`&lt;/span&gt;&lt;span class="n"&gt;）&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`--reload`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;使代码更改后可以自动重载，适用于开发环境&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`host 0.0.0.0`&lt;/span&gt;&lt;span class="n"&gt;：将&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;应用绑定到所有可用的网络接口，这样我们的本机就可以通过内网穿透访问该服务&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;配置端口转发，使得本机可以访问该服务 &lt;a href="https://www.autodl.com/docs/ssh_proxy/"&gt;SSH隧道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;浏览器输入以下 url，测试服务是否启动成功&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://localhost:8000/docs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;![[Pasted image 20250223232930.png]]
- 或者你也可以通过 postMan 来测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://localhost:8000/generate?prompt=你是谁？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;![[Pasted image 20250223232958.png]]&lt;/p&gt;
&lt;h2&gt;六、web后端调用&lt;/h2&gt;
&lt;h5&gt;1. pom.xml 导入依赖&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.httpcomponents.client5&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;httpclient5&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.2.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;2. 自定义方法发送并处理 HTTP 请求，实现对话功能&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChatServiceImpl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ChatService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nd"&gt;@Autowired&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RestTemplate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;restTemplate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nd"&gt;@Autowired&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AiServiceConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aiServiceConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;callAiForOneReply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 获取基础URL http://localhost:8000  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aiServiceConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBaseUrl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 构建完整的请求URL http://localhost:8000/generate?prompt=XXX  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s/generate?prompt=%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 发送GET请求并获取响应  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;GenerateResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;restTemplate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getForObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GenerateResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 从响应中取出 generated_text 字段值返回  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getGenerated_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;3. 本机启动 Demo 前后端工程，测试对话效果&lt;/h5&gt;
&lt;h6&gt;3.1 启动前端工程&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;前端项目地址：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://github.com/huangyf2013320506/magic_conch_frontend.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;执行：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6&gt;3.2 启动后端工程&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;后端项目地址：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://github.com/huangyf2013320506/magic_conch_backend.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;执行：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mvn&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;MagicConchBackendApplication.java&lt;/code&gt; 类中启动 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;4. FastAPI 支持自定义多种请求响应格式，可自行探索&lt;/h5&gt;
&lt;h5&gt;5. 如何开放服务端口到公网&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;AutoDL 当前仅支持个人用户通过端口转发在本地访问服务，如需开放服务端口到公网一般需要企业认证，请参考：&lt;a href="https://www.autodl.com/docs/port/"&gt;开放端口&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;6. 企业部署还需考虑高并发、高可用、安全机制等问题&lt;/h5&gt;</content><category term="Maofeng's Column"></category><category term="research"></category><category term="sharing"></category></entry><entry><title>Maofeng's First Article</title><link href="/maofengs-first-article.html" rel="alternate"></link><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><author><name>maofeng</name></author><id>tag:None,2024-03-20:/maofengs-first-article.html</id><content type="html">&lt;h1&gt;Maofeng's First Article&lt;/h1&gt;
&lt;p&gt;This is my first article, exploring technical innovation.&lt;/p&gt;
&lt;h2&gt;Innovation Content&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Technical Innovation&lt;/li&gt;
&lt;li&gt;Practical Applications&lt;/li&gt;
&lt;li&gt;Future Outlook&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Welcome to discuss! &lt;/p&gt;</content><category term="Maofeng's Column"></category><category term="technology"></category><category term="innovation"></category></entry><entry><title>Maofeng's Second Article</title><link href="/maofengs-second-article.html" rel="alternate"></link><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><author><name>maofeng</name></author><id>tag:None,2024-03-20:/maofengs-second-article.html</id><content type="html">&lt;h1&gt;Maofeng's Second Article&lt;/h1&gt;
&lt;p&gt;This is my second article, sharing research experience.&lt;/p&gt;
&lt;h2&gt;Research Experience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Research Process&lt;/li&gt;
&lt;li&gt;Challenges Faced&lt;/li&gt;
&lt;li&gt;Solutions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope these experiences are helpful to you! &lt;/p&gt;</content><category term="Maofeng's Column"></category><category term="research"></category><category term="sharing"></category></entry></feed>